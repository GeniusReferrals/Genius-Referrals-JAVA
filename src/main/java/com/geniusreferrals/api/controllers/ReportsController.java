/*
 * GeniusReferralsLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.geniusreferrals.api.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;

import com.geniusreferrals.api.*;
import com.geniusreferrals.api.models.*;
import com.geniusreferrals.api.exceptions.*;
import com.geniusreferrals.api.http.client.HttpClient;
import com.geniusreferrals.api.http.client.HttpContext;
import com.geniusreferrals.api.http.request.HttpRequest;
import com.geniusreferrals.api.http.response.HttpResponse;
import com.geniusreferrals.api.http.response.HttpStringResponse;
import com.geniusreferrals.api.http.client.APICallBack;
import com.geniusreferrals.api.controllers.syncwrapper.APICallBackCatcher;

public class ReportsController extends BaseController {    
    //private static variables for the singleton pattern
    private static Object syncObject = new Object();
    private static ReportsController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the ReportsController class 
     */
    public static ReportsController getInstance() {
        synchronized (syncObject) {
            if (null == instance) {
                instance = new ReportsController();
            }
        }
        return instance;
    }

    /**
     * Get referrals summary per referral origin.
     * @param    advocateToken    Required parameter: The advocate's token
     * @return    Returns the DynamicResponse response from the API call 
     */
    public DynamicResponse getReferralsSummaryPerOrigin(
                final String advocateToken
    ) throws Throwable {
        APICallBackCatcher<DynamicResponse> callback = new APICallBackCatcher<DynamicResponse>();
        getReferralsSummaryPerOriginAsync(advocateToken, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Get referrals summary per referral origin.
     * @param    advocateToken    Required parameter: The advocate's token
     * @return    Returns the void response from the API call 
     */
    public void getReferralsSummaryPerOriginAsync(
                final String advocateToken,
                final APICallBack<DynamicResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/reports/referrals-summary-per-origin");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5270123228840096679L;
            {
                    put( "advocate_token", advocateToken );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4766281235038367758L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "X-Auth-Token", Configuration.xAuthToken );
                    put( "Content-Type", Configuration.contentType );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            DynamicResponse _result = new DynamicResponse(_response);

                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Get bonuses summary per referral origin.
     * @param    advocateToken    Required parameter: The advocate's token
     * @return    Returns the DynamicResponse response from the API call 
     */
    public DynamicResponse getBonusesSummaryPerOrigin(
                final String advocateToken
    ) throws Throwable {
        APICallBackCatcher<DynamicResponse> callback = new APICallBackCatcher<DynamicResponse>();
        getBonusesSummaryPerOriginAsync(advocateToken, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Get bonuses summary per referral origin.
     * @param    advocateToken    Required parameter: The advocate's token
     * @return    Returns the void response from the API call 
     */
    public void getBonusesSummaryPerOriginAsync(
                final String advocateToken,
                final APICallBack<DynamicResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/reports/bonuses-summary-per-origin");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5652283620832948915L;
            {
                    put( "advocate_token", advocateToken );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4660016184304663093L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "X-Auth-Token", Configuration.xAuthToken );
                    put( "Content-Type", Configuration.contentType );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            DynamicResponse _result = new DynamicResponse(_response);

                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Get top 10 advocates.
     * @param    accountSlug    Optional parameter: The account identifier
     * @param    campaignSlug    Optional parameter: The campaign identifier
     * @param    limit    Optional parameter: Maximum number of results to return in the response. Default (10)
     * @param    from    Optional parameter: The datetime were the range of the search starts
     * @param    to    Optional parameter: The datetime were the range of the search stops
     * @return    Returns the DynamicResponse response from the API call 
     */
    public DynamicResponse getTopAdvocates(
                final String accountSlug,
                final String campaignSlug,
                final Integer limit,
                final Date from,
                final Date to
    ) throws Throwable {
        APICallBackCatcher<DynamicResponse> callback = new APICallBackCatcher<DynamicResponse>();
        getTopAdvocatesAsync(accountSlug, campaignSlug, limit, from, to, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Get top 10 advocates.
     * @param    accountSlug    Optional parameter: The account identifier
     * @param    campaignSlug    Optional parameter: The campaign identifier
     * @param    limit    Optional parameter: Maximum number of results to return in the response. Default (10)
     * @param    from    Optional parameter: The datetime were the range of the search starts
     * @param    to    Optional parameter: The datetime were the range of the search stops
     * @return    Returns the void response from the API call 
     */
    public void getTopAdvocatesAsync(
                final String accountSlug,
                final String campaignSlug,
                final Integer limit,
                final Date from,
                final Date to,
                final APICallBack<DynamicResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/reports/top-advocates");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5115229149110050671L;
            {
                    put( "account_slug", accountSlug );
                    put( "campaign_slug", campaignSlug );
                    put( "limit", (null != limit) ? limit : 10 );
                    put( "from", from );
                    put( "to", to );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5506128682471984141L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "X-Auth-Token", Configuration.xAuthToken );
                    put( "Content-Type", Configuration.contentType );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            DynamicResponse _result = new DynamicResponse(_response);

                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Get share daily participation.
     * @param    accountSlug    Optional parameter: The account identifier
     * @param    campaignSlug    Optional parameter: The campaign identifier
     * @param    advocateToken    Optional parameter: The advocate's token
     * @param    from    Optional parameter: The datetime were the range of the search starts
     * @param    to    Optional parameter: The datetime were the range of the search stops
     * @return    Returns the DynamicResponse response from the API call 
     */
    public DynamicResponse getShareDailyParticipation(
                final String accountSlug,
                final String campaignSlug,
                final String advocateToken,
                final Date from,
                final Date to
    ) throws Throwable {
        APICallBackCatcher<DynamicResponse> callback = new APICallBackCatcher<DynamicResponse>();
        getShareDailyParticipationAsync(accountSlug, campaignSlug, advocateToken, from, to, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Get share daily participation.
     * @param    accountSlug    Optional parameter: The account identifier
     * @param    campaignSlug    Optional parameter: The campaign identifier
     * @param    advocateToken    Optional parameter: The advocate's token
     * @param    from    Optional parameter: The datetime were the range of the search starts
     * @param    to    Optional parameter: The datetime were the range of the search stops
     * @return    Returns the void response from the API call 
     */
    public void getShareDailyParticipationAsync(
                final String accountSlug,
                final String campaignSlug,
                final String advocateToken,
                final Date from,
                final Date to,
                final APICallBack<DynamicResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/reports/share-daily-participation");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5241688054018936797L;
            {
                    put( "account_slug", accountSlug );
                    put( "campaign_slug", campaignSlug );
                    put( "advocate_token", advocateToken );
                    put( "from", from );
                    put( "to", to );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5585327770107340018L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "X-Auth-Token", Configuration.xAuthToken );
                    put( "Content-Type", Configuration.contentType );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            DynamicResponse _result = new DynamicResponse(_response);

                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Get referral daily participation.
     * @param    accountSlug    Optional parameter: The account identifier
     * @param    campaignSlug    Optional parameter: The campaign identifier
     * @param    advocateToken    Optional parameter: The advocate's token
     * @param    from    Optional parameter: The datetime were the range of the search starts
     * @param    to    Optional parameter: The datetime were the range of the search stops
     * @return    Returns the DynamicResponse response from the API call 
     */
    public DynamicResponse getReferralDailyParticipation(
                final String accountSlug,
                final String campaignSlug,
                final String advocateToken,
                final Date from,
                final Date to
    ) throws Throwable {
        APICallBackCatcher<DynamicResponse> callback = new APICallBackCatcher<DynamicResponse>();
        getReferralDailyParticipationAsync(accountSlug, campaignSlug, advocateToken, from, to, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Get referral daily participation.
     * @param    accountSlug    Optional parameter: The account identifier
     * @param    campaignSlug    Optional parameter: The campaign identifier
     * @param    advocateToken    Optional parameter: The advocate's token
     * @param    from    Optional parameter: The datetime were the range of the search starts
     * @param    to    Optional parameter: The datetime were the range of the search stops
     * @return    Returns the void response from the API call 
     */
    public void getReferralDailyParticipationAsync(
                final String accountSlug,
                final String campaignSlug,
                final String advocateToken,
                final Date from,
                final Date to,
                final APICallBack<DynamicResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/reports/referral-daily-participation");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5333808908238816237L;
            {
                    put( "account_slug", accountSlug );
                    put( "campaign_slug", campaignSlug );
                    put( "advocate_token", advocateToken );
                    put( "from", from );
                    put( "to", to );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5012043527008199378L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "X-Auth-Token", Configuration.xAuthToken );
                    put( "Content-Type", Configuration.contentType );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            DynamicResponse _result = new DynamicResponse(_response);

                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Get click daily participation.
     * @param    accountSlug    Optional parameter: The account identifier
     * @param    campaignSlug    Optional parameter: The campaign identifier
     * @param    advocateToken    Optional parameter: The advocate's token
     * @param    from    Optional parameter: The datetime were the range of the search starts
     * @param    to    Optional parameter: The datetime were the range of the search stops
     * @return    Returns the DynamicResponse response from the API call 
     */
    public DynamicResponse getClickDailyParticipation(
                final String accountSlug,
                final String campaignSlug,
                final String advocateToken,
                final Date from,
                final Date to
    ) throws Throwable {
        APICallBackCatcher<DynamicResponse> callback = new APICallBackCatcher<DynamicResponse>();
        getClickDailyParticipationAsync(accountSlug, campaignSlug, advocateToken, from, to, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Get click daily participation.
     * @param    accountSlug    Optional parameter: The account identifier
     * @param    campaignSlug    Optional parameter: The campaign identifier
     * @param    advocateToken    Optional parameter: The advocate's token
     * @param    from    Optional parameter: The datetime were the range of the search starts
     * @param    to    Optional parameter: The datetime were the range of the search stops
     * @return    Returns the void response from the API call 
     */
    public void getClickDailyParticipationAsync(
                final String accountSlug,
                final String campaignSlug,
                final String advocateToken,
                final Date from,
                final Date to,
                final APICallBack<DynamicResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/reports/click-daily-participation");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5213518905706270770L;
            {
                    put( "account_slug", accountSlug );
                    put( "campaign_slug", campaignSlug );
                    put( "advocate_token", advocateToken );
                    put( "from", from );
                    put( "to", to );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5013800339813211761L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "X-Auth-Token", Configuration.xAuthToken );
                    put( "Content-Type", Configuration.contentType );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            DynamicResponse _result = new DynamicResponse(_response);

                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Get bonuses daily given.
     * @param    accountSlug    Optional parameter: The account identifier
     * @param    campaignSlug    Optional parameter: The campaign identifier
     * @param    advocateToken    Optional parameter: The advocate identifier
     * @param    from    Optional parameter: The datetime were the range of the search starts
     * @param    to    Optional parameter: The datetime were the range of the search stops
     * @return    Returns the DynamicResponse response from the API call 
     */
    public DynamicResponse getBonusesDailyGiven(
                final String accountSlug,
                final String campaignSlug,
                final String advocateToken,
                final Date from,
                final Date to
    ) throws Throwable {
        APICallBackCatcher<DynamicResponse> callback = new APICallBackCatcher<DynamicResponse>();
        getBonusesDailyGivenAsync(accountSlug, campaignSlug, advocateToken, from, to, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Get bonuses daily given.
     * @param    accountSlug    Optional parameter: The account identifier
     * @param    campaignSlug    Optional parameter: The campaign identifier
     * @param    advocateToken    Optional parameter: The advocate identifier
     * @param    from    Optional parameter: The datetime were the range of the search starts
     * @param    to    Optional parameter: The datetime were the range of the search stops
     * @return    Returns the void response from the API call 
     */
    public void getBonusesDailyGivenAsync(
                final String accountSlug,
                final String campaignSlug,
                final String advocateToken,
                final Date from,
                final Date to,
                final APICallBack<DynamicResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/reports/bonuses-daily-given");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4924269259120735819L;
            {
                    put( "account_slug", accountSlug );
                    put( "campaign_slug", campaignSlug );
                    put( "advocate_token", advocateToken );
                    put( "from", from );
                    put( "to", to );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4918951605158186195L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "X-Auth-Token", Configuration.xAuthToken );
                    put( "Content-Type", Configuration.contentType );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            DynamicResponse _result = new DynamicResponse(_response);

                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

}